import html
import json

import allure
import pytest
import os

import requests
from allure_commons.types import AttachmentType


# Add command line options to pytest
def pytest_addoption(parser):
    parser.addoption("--env", action="store", default="dev",
                     help="Environment to run tests against: dev, staging, production")
    parser.addoption("--config-dir", action="store", default="config",
                     help="Path to the directory containing configuration folders")


def pytest_html_results_summary(prefix):

    prefix.extend(["<p>This report is generated by ujjwal</p>"])


def pytest_html_results_table_header(cells):
    cells.insert(2, "<th>Description</th>")
   # cells.insert(1, html"<th>Description</th>")
  #  cells.pop()  # to remove last column name



def pytest_html_results_table_row(report, cells):
   # cells.insert(2, html.td(report.description))
    cells.insert(1, f"<td>{report.description}</td>")

   # cells.pop(4)
    #cells.pop()  # to remove last row values



@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    report = outcome.get_result()
    try:
        report.description = str(item.function.__doc__) + " " + str((list(item.callspec.params.items())[0])[1])
    except:
        report.description = str(item.function.__doc__)
    print(report.description)


# Session-scoped fixture to read the configuration file
@pytest.fixture(scope="session")
def config(request):
    env = request.config.getoption("--env")
    config_dir = request.config.getoption("--config-dir")
    config_path = os.path.join(config_dir, env, "config.json")
    with open(config_path) as config_file:
        config_data = json.load(config_file)
    return config_data


# Session-scoped fixture to get the base URL
@pytest.fixture(scope="session")
def base_url(config):
    return config["base_url"]


# Session-scoped fixture to get the auth token
@pytest.fixture(scope="session")
def auth_token(base_url):
    # Implement your logic to get the auth token
    response = requests.post(f"{base_url}/auth", json={"username": "user", "password": "pass"})
    return response.json()["token"]


# Function-scoped fixture to get the headers
@pytest.fixture(scope="function")
def headers(auth_token):
    return {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }





# Log on failure fixture
@pytest.fixture()
def log_on_failure(request):
    yield
    item = request.node
    if hasattr(item, 'rep_call') and item.rep_call.failed:
        if hasattr(item, 'response'):
            allure.attach(item.response.request.body or '', name="Request Body", attachment_type=AttachmentType.JSON)
            allure.attach(item.response.text or '', name="Response Body", attachment_type=AttachmentType.JSON)
            allure.attach(str(item.response.status_code), name="Response Status Code",
                          attachment_type=AttachmentType.TEXT)


def allureLogs(text):
    with allure.step(text):
        pass



